// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devdash.proto

package devdashpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Mutation struct {
	Project              *ProjectMutation `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Release              *ReleaseMutation `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	Issue                *IssueMutation   `protobuf:"bytes,3,opt,name=issue,proto3" json:"issue,omitempty"`
	Git                  *GitMutation     `protobuf:"bytes,4,opt,name=git,proto3" json:"git,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Mutation) Reset()         { *m = Mutation{} }
func (m *Mutation) String() string { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()    {}
func (*Mutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{0}
}

func (m *Mutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mutation.Unmarshal(m, b)
}
func (m *Mutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mutation.Marshal(b, m, deterministic)
}
func (m *Mutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mutation.Merge(m, src)
}
func (m *Mutation) XXX_Size() int {
	return xxx_messageInfo_Mutation.Size(m)
}
func (m *Mutation) XXX_DiscardUnknown() {
	xxx_messageInfo_Mutation.DiscardUnknown(m)
}

var xxx_messageInfo_Mutation proto.InternalMessageInfo

func (m *Mutation) GetProject() *ProjectMutation {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *Mutation) GetRelease() *ReleaseMutation {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *Mutation) GetIssue() *IssueMutation {
	if m != nil {
		return m.Issue
	}
	return nil
}

func (m *Mutation) GetGit() *GitMutation {
	if m != nil {
		return m.Git
	}
	return nil
}

type ProjectMutation struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Milestones           []*TrackerMilestone `protobuf:"bytes,4,rep,name=milestones,proto3" json:"milestones,omitempty"`
	DeletedMilestones    []string            `protobuf:"bytes,5,rep,name=deleted_milestones,json=deletedMilestones,proto3" json:"deleted_milestones,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProjectMutation) Reset()         { *m = ProjectMutation{} }
func (m *ProjectMutation) String() string { return proto.CompactTextString(m) }
func (*ProjectMutation) ProtoMessage()    {}
func (*ProjectMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{1}
}

func (m *ProjectMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectMutation.Unmarshal(m, b)
}
func (m *ProjectMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectMutation.Marshal(b, m, deterministic)
}
func (m *ProjectMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectMutation.Merge(m, src)
}
func (m *ProjectMutation) XXX_Size() int {
	return xxx_messageInfo_ProjectMutation.Size(m)
}
func (m *ProjectMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectMutation.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectMutation proto.InternalMessageInfo

func (m *ProjectMutation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectMutation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProjectMutation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProjectMutation) GetMilestones() []*TrackerMilestone {
	if m != nil {
		return m.Milestones
	}
	return nil
}

func (m *ProjectMutation) GetDeletedMilestones() []string {
	if m != nil {
		return m.DeletedMilestones
	}
	return nil
}

type ReleaseMutation struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FreezeDate           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=freeze_date,json=freezeDate,proto3" json:"freeze_date,omitempty"`
	ReleaseDate          *timestamp.Timestamp `protobuf:"bytes,5,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Closed               bool                 `protobuf:"varint,6,opt,name=closed,proto3" json:"closed,omitempty"`
	Milestones           []*TrackerMilestone  `protobuf:"bytes,7,rep,name=milestones,proto3" json:"milestones,omitempty"`
	DeletedMilestones    []string             `protobuf:"bytes,8,rep,name=deleted_milestones,json=deletedMilestones,proto3" json:"deleted_milestones,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReleaseMutation) Reset()         { *m = ReleaseMutation{} }
func (m *ReleaseMutation) String() string { return proto.CompactTextString(m) }
func (*ReleaseMutation) ProtoMessage()    {}
func (*ReleaseMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{2}
}

func (m *ReleaseMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseMutation.Unmarshal(m, b)
}
func (m *ReleaseMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseMutation.Marshal(b, m, deterministic)
}
func (m *ReleaseMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseMutation.Merge(m, src)
}
func (m *ReleaseMutation) XXX_Size() int {
	return xxx_messageInfo_ReleaseMutation.Size(m)
}
func (m *ReleaseMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseMutation.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseMutation proto.InternalMessageInfo

func (m *ReleaseMutation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReleaseMutation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReleaseMutation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReleaseMutation) GetFreezeDate() *timestamp.Timestamp {
	if m != nil {
		return m.FreezeDate
	}
	return nil
}

func (m *ReleaseMutation) GetReleaseDate() *timestamp.Timestamp {
	if m != nil {
		return m.ReleaseDate
	}
	return nil
}

func (m *ReleaseMutation) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *ReleaseMutation) GetMilestones() []*TrackerMilestone {
	if m != nil {
		return m.Milestones
	}
	return nil
}

func (m *ReleaseMutation) GetDeletedMilestones() []string {
	if m != nil {
		return m.DeletedMilestones
	}
	return nil
}

type IssueMutation struct {
	Project  string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	IssueKey string `protobuf:"bytes,3,opt,name=issueKey,proto3" json:"issueKey,omitempty"`
	// not_exist is set true if the issue has been found to not exist.
	// If true, the project/id/issueKey fields above must still be set.
	// If a future issue mutation for the same number arrives without
	// not_exist set, then the issue comes back to life.
	NotExist             bool                 `protobuf:"varint,4,opt,name=not_exist,json=notExist,proto3" json:"not_exist,omitempty"`
	Created              *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Updated              *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	Title                string               `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string               `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	Owner                *TrackerUser         `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	Assignees            []*TrackerUser       `protobuf:"bytes,10,rep,name=assignees,proto3" json:"assignees,omitempty"`
	DeletedAssignees     []string             `protobuf:"bytes,11,rep,name=deleted_assignees,json=deletedAssignees,proto3" json:"deleted_assignees,omitempty"`
	Milestones           []*TrackerMilestone  `protobuf:"bytes,12,rep,name=milestones,proto3" json:"milestones,omitempty"`
	DeletedMilestones    []string             `protobuf:"bytes,13,rep,name=deleted_milestones,json=deletedMilestones,proto3" json:"deleted_milestones,omitempty"`
	Status               string               `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	Closed               bool                 `protobuf:"varint,15,opt,name=closed,proto3" json:"closed,omitempty"`
	ClosedAt             *timestamp.Timestamp `protobuf:"bytes,16,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	ClosedBy             *TrackerUser         `protobuf:"bytes,17,opt,name=closed_by,json=closedBy,proto3" json:"closed_by,omitempty"`
	Labels               []*TrackerLabel      `protobuf:"bytes,18,rep,name=labels,proto3" json:"labels,omitempty"`
	DeletedLabels        []*TrackerLabel      `protobuf:"bytes,19,rep,name=deleted_labels,json=deletedLabels,proto3" json:"deleted_labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IssueMutation) Reset()         { *m = IssueMutation{} }
func (m *IssueMutation) String() string { return proto.CompactTextString(m) }
func (*IssueMutation) ProtoMessage()    {}
func (*IssueMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{3}
}

func (m *IssueMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueMutation.Unmarshal(m, b)
}
func (m *IssueMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueMutation.Marshal(b, m, deterministic)
}
func (m *IssueMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueMutation.Merge(m, src)
}
func (m *IssueMutation) XXX_Size() int {
	return xxx_messageInfo_IssueMutation.Size(m)
}
func (m *IssueMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueMutation.DiscardUnknown(m)
}

var xxx_messageInfo_IssueMutation proto.InternalMessageInfo

func (m *IssueMutation) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *IssueMutation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IssueMutation) GetIssueKey() string {
	if m != nil {
		return m.IssueKey
	}
	return ""
}

func (m *IssueMutation) GetNotExist() bool {
	if m != nil {
		return m.NotExist
	}
	return false
}

func (m *IssueMutation) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *IssueMutation) GetUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *IssueMutation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *IssueMutation) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *IssueMutation) GetOwner() *TrackerUser {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *IssueMutation) GetAssignees() []*TrackerUser {
	if m != nil {
		return m.Assignees
	}
	return nil
}

func (m *IssueMutation) GetDeletedAssignees() []string {
	if m != nil {
		return m.DeletedAssignees
	}
	return nil
}

func (m *IssueMutation) GetMilestones() []*TrackerMilestone {
	if m != nil {
		return m.Milestones
	}
	return nil
}

func (m *IssueMutation) GetDeletedMilestones() []string {
	if m != nil {
		return m.DeletedMilestones
	}
	return nil
}

func (m *IssueMutation) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *IssueMutation) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *IssueMutation) GetClosedAt() *timestamp.Timestamp {
	if m != nil {
		return m.ClosedAt
	}
	return nil
}

func (m *IssueMutation) GetClosedBy() *TrackerUser {
	if m != nil {
		return m.ClosedBy
	}
	return nil
}

func (m *IssueMutation) GetLabels() []*TrackerLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *IssueMutation) GetDeletedLabels() []*TrackerLabel {
	if m != nil {
		return m.DeletedLabels
	}
	return nil
}

type TrackerLabel struct {
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackerLabel) Reset()         { *m = TrackerLabel{} }
func (m *TrackerLabel) String() string { return proto.CompactTextString(m) }
func (*TrackerLabel) ProtoMessage()    {}
func (*TrackerLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{4}
}

func (m *TrackerLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackerLabel.Unmarshal(m, b)
}
func (m *TrackerLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackerLabel.Marshal(b, m, deterministic)
}
func (m *TrackerLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackerLabel.Merge(m, src)
}
func (m *TrackerLabel) XXX_Size() int {
	return xxx_messageInfo_TrackerLabel.Size(m)
}
func (m *TrackerLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackerLabel.DiscardUnknown(m)
}

var xxx_messageInfo_TrackerLabel proto.InternalMessageInfo

func (m *TrackerLabel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TrackerMilestone struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Following only need to be non-zero on changes:
	Closed               bool     `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackerMilestone) Reset()         { *m = TrackerMilestone{} }
func (m *TrackerMilestone) String() string { return proto.CompactTextString(m) }
func (*TrackerMilestone) ProtoMessage()    {}
func (*TrackerMilestone) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{5}
}

func (m *TrackerMilestone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackerMilestone.Unmarshal(m, b)
}
func (m *TrackerMilestone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackerMilestone.Marshal(b, m, deterministic)
}
func (m *TrackerMilestone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackerMilestone.Merge(m, src)
}
func (m *TrackerMilestone) XXX_Size() int {
	return xxx_messageInfo_TrackerMilestone.Size(m)
}
func (m *TrackerMilestone) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackerMilestone.DiscardUnknown(m)
}

var xxx_messageInfo_TrackerMilestone proto.InternalMessageInfo

func (m *TrackerMilestone) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackerMilestone) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *TrackerMilestone) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *TrackerMilestone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackerMilestone) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type IssueCommentMutation struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User                 *TrackerUser         `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Body                 string               `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Created              *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Updated              *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IssueCommentMutation) Reset()         { *m = IssueCommentMutation{} }
func (m *IssueCommentMutation) String() string { return proto.CompactTextString(m) }
func (*IssueCommentMutation) ProtoMessage()    {}
func (*IssueCommentMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{6}
}

func (m *IssueCommentMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueCommentMutation.Unmarshal(m, b)
}
func (m *IssueCommentMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueCommentMutation.Marshal(b, m, deterministic)
}
func (m *IssueCommentMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueCommentMutation.Merge(m, src)
}
func (m *IssueCommentMutation) XXX_Size() int {
	return xxx_messageInfo_IssueCommentMutation.Size(m)
}
func (m *IssueCommentMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueCommentMutation.DiscardUnknown(m)
}

var xxx_messageInfo_IssueCommentMutation proto.InternalMessageInfo

func (m *IssueCommentMutation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IssueCommentMutation) GetUser() *TrackerUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *IssueCommentMutation) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *IssueCommentMutation) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *IssueCommentMutation) GetUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

type TrackerUser struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackerUser) Reset()         { *m = TrackerUser{} }
func (m *TrackerUser) String() string { return proto.CompactTextString(m) }
func (*TrackerUser) ProtoMessage()    {}
func (*TrackerUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{7}
}

func (m *TrackerUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackerUser.Unmarshal(m, b)
}
func (m *TrackerUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackerUser.Marshal(b, m, deterministic)
}
func (m *TrackerUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackerUser.Merge(m, src)
}
func (m *TrackerUser) XXX_Size() int {
	return xxx_messageInfo_TrackerUser.Size(m)
}
func (m *TrackerUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackerUser.DiscardUnknown(m)
}

var xxx_messageInfo_TrackerUser proto.InternalMessageInfo

func (m *TrackerUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackerUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackerUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type GitMutation struct {
	Repo                 string     `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Commit               *GitCommit `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Refs                 []*GitRef  `protobuf:"bytes,3,rep,name=refs,proto3" json:"refs,omitempty"`
	DeletedRefs          []string   `protobuf:"bytes,4,rep,name=deleted_refs,json=deletedRefs,proto3" json:"deleted_refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GitMutation) Reset()         { *m = GitMutation{} }
func (m *GitMutation) String() string { return proto.CompactTextString(m) }
func (*GitMutation) ProtoMessage()    {}
func (*GitMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{8}
}

func (m *GitMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitMutation.Unmarshal(m, b)
}
func (m *GitMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitMutation.Marshal(b, m, deterministic)
}
func (m *GitMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitMutation.Merge(m, src)
}
func (m *GitMutation) XXX_Size() int {
	return xxx_messageInfo_GitMutation.Size(m)
}
func (m *GitMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_GitMutation.DiscardUnknown(m)
}

var xxx_messageInfo_GitMutation proto.InternalMessageInfo

func (m *GitMutation) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GitMutation) GetCommit() *GitCommit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *GitMutation) GetRefs() []*GitRef {
	if m != nil {
		return m.Refs
	}
	return nil
}

func (m *GitMutation) GetDeletedRefs() []string {
	if m != nil {
		return m.DeletedRefs
	}
	return nil
}

type GitCommit struct {
	Sha1 string `protobuf:"bytes,1,opt,name=sha1,proto3" json:"sha1,omitempty"`
	// raw is the "git cat-file commit $sha1" output.
	Raw                  string       `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
	DiffTree             *GitDiffTree `protobuf:"bytes,3,opt,name=diff_tree,json=diffTree,proto3" json:"diff_tree,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GitCommit) Reset()         { *m = GitCommit{} }
func (m *GitCommit) String() string { return proto.CompactTextString(m) }
func (*GitCommit) ProtoMessage()    {}
func (*GitCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{9}
}

func (m *GitCommit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitCommit.Unmarshal(m, b)
}
func (m *GitCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitCommit.Marshal(b, m, deterministic)
}
func (m *GitCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitCommit.Merge(m, src)
}
func (m *GitCommit) XXX_Size() int {
	return xxx_messageInfo_GitCommit.Size(m)
}
func (m *GitCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_GitCommit.DiscardUnknown(m)
}

var xxx_messageInfo_GitCommit proto.InternalMessageInfo

func (m *GitCommit) GetSha1() string {
	if m != nil {
		return m.Sha1
	}
	return ""
}

func (m *GitCommit) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *GitCommit) GetDiffTree() *GitDiffTree {
	if m != nil {
		return m.DiffTree
	}
	return nil
}

// git diff-tree --numstat oldtree newtree
type GitDiffTree struct {
	File                 []*GitDiffTreeFile `protobuf:"bytes,1,rep,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GitDiffTree) Reset()         { *m = GitDiffTree{} }
func (m *GitDiffTree) String() string { return proto.CompactTextString(m) }
func (*GitDiffTree) ProtoMessage()    {}
func (*GitDiffTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{10}
}

func (m *GitDiffTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitDiffTree.Unmarshal(m, b)
}
func (m *GitDiffTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitDiffTree.Marshal(b, m, deterministic)
}
func (m *GitDiffTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitDiffTree.Merge(m, src)
}
func (m *GitDiffTree) XXX_Size() int {
	return xxx_messageInfo_GitDiffTree.Size(m)
}
func (m *GitDiffTree) XXX_DiscardUnknown() {
	xxx_messageInfo_GitDiffTree.DiscardUnknown(m)
}

var xxx_messageInfo_GitDiffTree proto.InternalMessageInfo

func (m *GitDiffTree) GetFile() []*GitDiffTreeFile {
	if m != nil {
		return m.File
	}
	return nil
}

// GitDiffTreeFile represents one line of `git diff-tree --numstat` output.
type GitDiffTreeFile struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Added                int64    `protobuf:"varint,2,opt,name=added,proto3" json:"added,omitempty"`
	Deleted              int64    `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Binary               bool     `protobuf:"varint,4,opt,name=binary,proto3" json:"binary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitDiffTreeFile) Reset()         { *m = GitDiffTreeFile{} }
func (m *GitDiffTreeFile) String() string { return proto.CompactTextString(m) }
func (*GitDiffTreeFile) ProtoMessage()    {}
func (*GitDiffTreeFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{11}
}

func (m *GitDiffTreeFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitDiffTreeFile.Unmarshal(m, b)
}
func (m *GitDiffTreeFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitDiffTreeFile.Marshal(b, m, deterministic)
}
func (m *GitDiffTreeFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitDiffTreeFile.Merge(m, src)
}
func (m *GitDiffTreeFile) XXX_Size() int {
	return xxx_messageInfo_GitDiffTreeFile.Size(m)
}
func (m *GitDiffTreeFile) XXX_DiscardUnknown() {
	xxx_messageInfo_GitDiffTreeFile.DiscardUnknown(m)
}

var xxx_messageInfo_GitDiffTreeFile proto.InternalMessageInfo

func (m *GitDiffTreeFile) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *GitDiffTreeFile) GetAdded() int64 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *GitDiffTreeFile) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *GitDiffTreeFile) GetBinary() bool {
	if m != nil {
		return m.Binary
	}
	return false
}

type GitRef struct {
	// ref is the git ref name, such as:
	//    HEAD
	//    refs/heads/master
	//    refs/changes/00/14700/1
	//    refs/changes/00/14700/meta
	//    refs/meta/config
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// sha1 is the lowercase hex sha1
	Sha1                 string   `protobuf:"bytes,2,opt,name=sha1,proto3" json:"sha1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitRef) Reset()         { *m = GitRef{} }
func (m *GitRef) String() string { return proto.CompactTextString(m) }
func (*GitRef) ProtoMessage()    {}
func (*GitRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eddb5bdebb5405, []int{12}
}

func (m *GitRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitRef.Unmarshal(m, b)
}
func (m *GitRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitRef.Marshal(b, m, deterministic)
}
func (m *GitRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitRef.Merge(m, src)
}
func (m *GitRef) XXX_Size() int {
	return xxx_messageInfo_GitRef.Size(m)
}
func (m *GitRef) XXX_DiscardUnknown() {
	xxx_messageInfo_GitRef.DiscardUnknown(m)
}

var xxx_messageInfo_GitRef proto.InternalMessageInfo

func (m *GitRef) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *GitRef) GetSha1() string {
	if m != nil {
		return m.Sha1
	}
	return ""
}

func init() {
	proto.RegisterType((*Mutation)(nil), "devdashpb.Mutation")
	proto.RegisterType((*ProjectMutation)(nil), "devdashpb.ProjectMutation")
	proto.RegisterType((*ReleaseMutation)(nil), "devdashpb.ReleaseMutation")
	proto.RegisterType((*IssueMutation)(nil), "devdashpb.IssueMutation")
	proto.RegisterType((*TrackerLabel)(nil), "devdashpb.TrackerLabel")
	proto.RegisterType((*TrackerMilestone)(nil), "devdashpb.TrackerMilestone")
	proto.RegisterType((*IssueCommentMutation)(nil), "devdashpb.IssueCommentMutation")
	proto.RegisterType((*TrackerUser)(nil), "devdashpb.TrackerUser")
	proto.RegisterType((*GitMutation)(nil), "devdashpb.GitMutation")
	proto.RegisterType((*GitCommit)(nil), "devdashpb.GitCommit")
	proto.RegisterType((*GitDiffTree)(nil), "devdashpb.GitDiffTree")
	proto.RegisterType((*GitDiffTreeFile)(nil), "devdashpb.GitDiffTreeFile")
	proto.RegisterType((*GitRef)(nil), "devdashpb.GitRef")
}

func init() { proto.RegisterFile("devdash.proto", fileDescriptor_f8eddb5bdebb5405) }

var fileDescriptor_f8eddb5bdebb5405 = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x8e, 0x1b, 0x45,
	0x10, 0x96, 0x3d, 0xb6, 0xd7, 0x53, 0xb3, 0xbf, 0xcd, 0x2a, 0xb4, 0x9c, 0x8b, 0x19, 0x09, 0xc9,
	0x82, 0x30, 0x16, 0x49, 0x24, 0x0e, 0x51, 0x90, 0x42, 0x02, 0x11, 0x82, 0x48, 0xa8, 0xb5, 0x9c,
	0xad, 0xb6, 0xa7, 0xc6, 0xdb, 0x30, 0x7f, 0x9a, 0x6e, 0x13, 0xcc, 0x23, 0x70, 0xe6, 0xc2, 0xf3,
	0xf0, 0x02, 0x88, 0x0b, 0xaf, 0x83, 0xfa, 0x67, 0xc6, 0x63, 0x7b, 0xbd, 0xbb, 0x42, 0x7b, 0xab,
	0x72, 0x7d, 0x5f, 0x4f, 0xf5, 0xd7, 0x5f, 0x75, 0x1b, 0x4e, 0x62, 0xfc, 0x25, 0xe6, 0xf2, 0x3a,
	0x2a, 0xab, 0x42, 0x15, 0xc4, 0x77, 0x69, 0x39, 0x1f, 0xbd, 0x58, 0x0a, 0x75, 0xbd, 0x9a, 0x47,
	0x8b, 0x22, 0x9b, 0x2e, 0x8b, 0x94, 0xe7, 0xcb, 0xa9, 0xc1, 0xcc, 0x57, 0xc9, 0xb4, 0x54, 0xeb,
	0x12, 0xe5, 0x54, 0x89, 0x0c, 0xa5, 0xe2, 0x59, 0xb9, 0x89, 0xec, 0x3a, 0xe1, 0xdf, 0x1d, 0x18,
	0xbe, 0x5b, 0x29, 0xae, 0x44, 0x91, 0x93, 0xe7, 0x70, 0x54, 0x56, 0xc5, 0x4f, 0xb8, 0x50, 0xb4,
	0x33, 0xee, 0x4c, 0x82, 0xa7, 0xa3, 0xa8, 0xf9, 0x4c, 0xf4, 0x83, 0xad, 0xd4, 0x60, 0x56, 0x43,
	0x35, 0xab, 0xc2, 0x14, 0xb9, 0x44, 0xda, 0xdd, 0x63, 0x31, 0x5b, 0xd9, 0xb0, 0x1c, 0x94, 0x44,
	0xd0, 0x17, 0x52, 0xae, 0x90, 0x7a, 0x86, 0x43, 0x5b, 0x9c, 0x6f, 0xf5, 0xef, 0x0d, 0xc3, 0xc2,
	0xc8, 0x04, 0xbc, 0xa5, 0x50, 0xb4, 0x67, 0xd0, 0x8f, 0x5a, 0xe8, 0xb7, 0x62, 0xd3, 0x93, 0x86,
	0x84, 0x7f, 0x75, 0xe0, 0x6c, 0xa7, 0x59, 0x72, 0x0a, 0x5d, 0x11, 0x9b, 0x4d, 0xf9, 0xac, 0x2b,
	0x62, 0x42, 0xa0, 0x97, 0xf3, 0xcc, 0x36, 0xec, 0x33, 0x13, 0x93, 0x31, 0x04, 0x31, 0xca, 0x45,
	0x25, 0x4a, 0x4d, 0x31, 0x7d, 0xf9, 0xac, 0xfd, 0x13, 0x79, 0x01, 0x90, 0x89, 0x14, 0xa5, 0x2a,
	0x72, 0x94, 0xb4, 0x37, 0xf6, 0x26, 0xc1, 0xd3, 0xc7, 0xad, 0x56, 0xae, 0x2a, 0xbe, 0xf8, 0x19,
	0xab, 0x77, 0x35, 0x86, 0xb5, 0xe0, 0xe4, 0x33, 0x20, 0x31, 0xa6, 0xa8, 0x30, 0x9e, 0xb5, 0x16,
	0xe9, 0x8f, 0xbd, 0x89, 0xcf, 0x2e, 0x5c, 0xa5, 0x61, 0xca, 0xf0, 0xdf, 0x2e, 0x9c, 0xed, 0x88,
	0xf7, 0x60, 0xbb, 0x08, 0x92, 0x0a, 0xf1, 0x37, 0x9c, 0xc5, 0x5c, 0xa1, 0x53, 0x74, 0x14, 0x2d,
	0x8b, 0x62, 0x99, 0x62, 0x54, 0x5b, 0x27, 0xba, 0xaa, 0x9d, 0xc2, 0xc0, 0xc2, 0xdf, 0x70, 0x85,
	0xe4, 0x25, 0x1c, 0xbb, 0x13, 0xb4, 0xec, 0xfe, 0x9d, 0xec, 0xc0, 0xe1, 0x0d, 0xfd, 0x11, 0x0c,
	0x16, 0x69, 0x21, 0x31, 0xa6, 0x83, 0x71, 0x67, 0x32, 0x64, 0x2e, 0xdb, 0x51, 0xf6, 0xe8, 0x21,
	0x94, 0x1d, 0x1e, 0x52, 0xf6, 0x8f, 0x01, 0x9c, 0x6c, 0x59, 0x8c, 0xd0, 0x6d, 0xdf, 0xfb, 0x1b,
	0x6f, 0x5b, 0xc5, 0xbb, 0x8d, 0xe2, 0x23, 0x18, 0x1a, 0x3b, 0x7e, 0x87, 0x6b, 0x27, 0x6d, 0x93,
	0x93, 0xc7, 0xe0, 0xe7, 0x85, 0x9a, 0xe1, 0xaf, 0x42, 0x5a, 0x9f, 0x0e, 0xd9, 0x30, 0x2f, 0xd4,
	0xd7, 0x3a, 0xd7, 0x43, 0xb2, 0xa8, 0x90, 0x2b, 0x8c, 0xef, 0x21, 0x59, 0x0d, 0xd5, 0xac, 0x55,
	0x19, 0x1b, 0xd6, 0xe0, 0x6e, 0x96, 0x83, 0x92, 0x4b, 0xe8, 0x2b, 0xa1, 0x52, 0xa4, 0x47, 0xa6,
	0x43, 0x9b, 0x68, 0xb3, 0xcc, 0x8b, 0x78, 0x4d, 0x87, 0xd6, 0x2c, 0x3a, 0x26, 0x4f, 0xa0, 0x5f,
	0xbc, 0xcf, 0xb1, 0xa2, 0xfe, 0xde, 0x58, 0x39, 0xc5, 0x7f, 0x94, 0x58, 0x31, 0x0b, 0x22, 0xcf,
	0xc1, 0xe7, 0x52, 0x8a, 0x65, 0x8e, 0x28, 0x29, 0x98, 0x33, 0x3a, 0xc4, 0xd8, 0x00, 0xc9, 0xa7,
	0x50, 0x9f, 0xc1, 0x6c, 0xc3, 0x0e, 0xcc, 0xe1, 0x9c, 0xbb, 0xc2, 0xab, 0x06, 0xbc, 0xed, 0x83,
	0xe3, 0x87, 0xf0, 0xc1, 0xc9, 0x01, 0x1f, 0x68, 0x2f, 0x4a, 0xc5, 0xd5, 0x4a, 0xd2, 0x53, 0x23,
	0x89, 0xcb, 0x5a, 0x1e, 0x3d, 0xdb, 0xf2, 0xe8, 0x17, 0xe0, 0xdb, 0x68, 0xc6, 0x15, 0x3d, 0xbf,
	0xf3, 0x38, 0x86, 0x16, 0xfc, 0x4a, 0x91, 0x67, 0x0d, 0x71, 0xbe, 0xa6, 0x17, 0xb7, 0x2a, 0xed,
	0x48, 0x5f, 0xad, 0xc9, 0x14, 0x06, 0x29, 0x9f, 0x63, 0x2a, 0x29, 0x31, 0x2a, 0x7c, 0xb8, 0xcf,
	0xf8, 0x5e, 0xd7, 0x99, 0x83, 0x91, 0x2f, 0xe1, 0xb4, 0xde, 0xbd, 0x23, 0x7e, 0x70, 0x3b, 0xf1,
	0xc4, 0xc1, 0x4d, 0x26, 0xc3, 0x10, 0x8e, 0xdb, 0xe5, 0x9b, 0x2e, 0x97, 0xf0, 0xf7, 0x0e, 0x9c,
	0xef, 0x1e, 0xc1, 0xde, 0xad, 0xd4, 0x9a, 0xa6, 0xee, 0xf6, 0x34, 0x6d, 0x94, 0xf5, 0xb6, 0x94,
	0xad, 0x3f, 0xd5, 0x3b, 0x7c, 0x8f, 0xf5, 0xf7, 0xee, 0xb1, 0xf0, 0x9f, 0x0e, 0x5c, 0x9a, 0x39,
	0x7e, 0x5d, 0x64, 0x19, 0xe6, 0x37, 0x5d, 0xf6, 0x9e, 0x69, 0xe8, 0x13, 0xe8, 0xad, 0x24, 0x56,
	0xee, 0x75, 0x3a, 0x24, 0xbd, 0xc1, 0x34, 0x53, 0xe2, 0xb5, 0xa6, 0xa4, 0x35, 0xbb, 0xbd, 0xff,
	0x35, 0xbb, 0xfd, 0x7b, 0xcf, 0x6e, 0xf8, 0x16, 0x82, 0x56, 0x53, 0xf7, 0xba, 0xf1, 0x2f, 0xa1,
	0x8f, 0x19, 0x17, 0xa9, 0xeb, 0xd9, 0x26, 0xe1, 0x9f, 0x1d, 0x08, 0x5a, 0x4f, 0xa3, 0x66, 0x56,
	0x58, 0x16, 0x6e, 0x2d, 0x13, 0x93, 0x27, 0x30, 0x58, 0x14, 0x59, 0x26, 0x94, 0x93, 0xe6, 0x72,
	0xfb, 0x59, 0x7d, 0x6d, 0x6a, 0xcc, 0x61, 0xc8, 0xc7, 0x7a, 0x85, 0x44, 0x52, 0xcf, 0xd8, 0xea,
	0x62, 0x1b, 0xcb, 0x30, 0x61, 0xa6, 0x4c, 0x3e, 0x82, 0xe3, 0xda, 0x87, 0x06, 0xde, 0x33, 0xf3,
	0x17, 0xb8, 0xdf, 0x18, 0x26, 0x32, 0x4c, 0xc0, 0x6f, 0x96, 0xd7, 0x8d, 0xc9, 0x6b, 0xfe, 0x79,
	0xdd, 0x98, 0x8e, 0xc9, 0x39, 0x78, 0x15, 0x7f, 0xef, 0x76, 0xa9, 0x43, 0x3d, 0x43, 0xb1, 0x48,
	0x92, 0x99, 0xaa, 0xb0, 0xfe, 0xcb, 0xb0, 0xf3, 0x27, 0xe0, 0x8d, 0x48, 0x92, 0xab, 0x0a, 0x91,
	0x0d, 0x63, 0x17, 0x85, 0x2f, 0x8d, 0x04, 0x75, 0x81, 0x44, 0xd0, 0x4b, 0x44, 0x8a, 0xb4, 0x63,
	0x36, 0x30, 0xba, 0x99, 0xfe, 0x8d, 0x48, 0x91, 0x19, 0x5c, 0x98, 0xc1, 0xd9, 0x4e, 0x41, 0x37,
	0xeb, 0x96, 0x30, 0xcd, 0xea, 0x58, 0xeb, 0xcf, 0xe3, 0x18, 0xed, 0x33, 0xe1, 0x31, 0x9b, 0xe8,
	0x29, 0x70, 0x5b, 0x36, 0xed, 0x7a, 0xac, 0x4e, 0xf5, 0x14, 0xcc, 0x45, 0xce, 0xab, 0xb5, 0x7b,
	0x24, 0x5c, 0x16, 0x46, 0x30, 0xb0, 0x42, 0x9a, 0xed, 0x63, 0xe2, 0x3e, 0xa2, 0xc3, 0x46, 0xa4,
	0xee, 0x46, 0xa4, 0xf9, 0xc0, 0xf8, 0xe8, 0xd9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x55, 0x40,
	0x78, 0x43, 0x1a, 0x0a, 0x00, 0x00,
}
